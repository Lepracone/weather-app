{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","city","currentCityWeather","invisible","isFetching","units","getData","bind","handleChange","toggleClass","that","this","Promise","all","fetch","mode","then","a","current","json","currentWeather","response","parseInt","cod","setState","message","catch","error","console","log","event","target","name","value","type","currentState","className","checked","onChange","placeholder","onClick","main","temp","feels_like","alt","src","weather","icon","description","wind","speed","deg","humidity","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60745cb2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state = {\n      city:\"Lisbon\",\n      currentCityWeather:\"\",\n      invisible: true,\n      isFetching : true,\n      units: \"metric\"\n    }\n  this.getData = this.getData.bind(this)\n  this.handleChange = this.handleChange.bind(this)\n  this.toggleClass = this.toggleClass.bind(this)\n  }\n\n  getData() {\n    const that = this;\n    Promise.all([\n      fetch('https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q='+that.state.city+'&appid=4c77efd9f8291e2531b89885b49ca00e&units='+that.state.units,{mode : 'cors'}),\n\n    ])\n      .then(async([current]) => {\n        const currentWeather = await current.json();\n        return [currentWeather]\n      })\n      .then(function(response){\n        if(parseInt(response[0].cod) === 404){\n          that.setState({city: response[0].message})\n        }else{\n          that.setState({currentCityWeather: response[0]})\n          that.setState({isFetching: false})\n        }\n      })\n      \n      .catch(function(error){\n        console.log(error)\n      })\n\n      if(this.state.invisible === true){\n        that.toggleClass()\n      }\n      \n  }\n\n  async handleChange(event){\n    const {name, value, type} = event.target\n    this.setState({[name]: value})\n    await type === \"radio\" ? this.getData() : console.log(\"\");\n    this.setState({[name]: value})\n    \n\n  }\n\n\n  toggleClass(){\n    const currentState = this.state.invisible;\n    this.setState({invisible: !currentState});\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n\n  render(){\n  \n    return(\n      <div className = \"mainContainer\">\n        <div className = \"topbar\">\n          <div className=\"units\">\n            <label className=\"units-label\">\n              <input\n                type=\"radio\"\n                name=\"units\"\n                value=\"metric\"\n                checked={this.state.units===\"metric\"}\n                onChange={this.handleChange}\n              />ยบC\n            </label>\n            <label className=\"units-label\">\n              <input\n                type=\"radio\"\n                name=\"units\"\n                value=\"imperial\"\n                checked={this.state.units===\"imperial\"}\n                onChange={this.handleChange}\n              />Fahrenheit\n            </label>\n          </div>\n          \n          <div className=\"search-bar\">\n          <input \n            type=\"text\"\n            value={this.state.city}\n            name=\"city\"\n            placeholder=\"Insert City Name\"\n            onChange={this.handleChange} \n          />\n          \n          <button onClick={this.getData}><i className=\"fas fa-search-location\"></i></button>\n          </div>\n        </div>\n\n        {this.state.isFetching? null : (\n          <div className={this.state.invisible ? \"invisible\" : null}>\n            <div className = \"topContainer\">\n              <h1>{this.state.currentCityWeather.name}</h1>\n            </div>\n\n             \n            <div className = \"middleContainer\"> \n              <div className=\"leftCollumn\"> \n                  <div className=\"temperature\"><i className=\"fas fa-thermometer-half\"></i> {this.state.currentCityWeather.main.temp}ยบ</div>\n                  <div> <i className=\"fas fa-user\"></i> Feels Like :{this.state.currentCityWeather.main.feels_like}ยบ</div>\n                </div>\n\n                <div className=\"rightCollumn\"> \n                  <img className=\"weatherImage\" alt=\"icon\" src={\"http://openweathermap.org/img/w/\"+ this.state.currentCityWeather.weather[0].icon + \".png\" }/>\n                  <div>{this.state.currentCityWeather.weather[0].description}</div>\n                  <div className=\"row\">\n                    <div><i className=\"fas fa-wind\"></i> {this.state.currentCityWeather.wind.speed} {this.state.units===\"metric\" ? \"m/s\" : \"mph\"}</div>\n                    <div><i className=\"fas fa-compass\"></i> {this.state.currentCityWeather.wind.deg} ยบ</div>\n                  </div>\n                  <div className=\"row\">\n                    <div><i className=\"fas fa-tint\"></i> Humidity :  {this.state.currentCityWeather.main.humidity} %</div>\n                  </div>\n                  \n              </div>\n            </div>\n\n            <div className = \"bottomContainer\">\n              <div>\n              </div>\n            </div>\n          </div>\n        )}  \n      </div>\n      \n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}